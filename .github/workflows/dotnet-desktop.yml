# This workflow builds, tests, signs, and packages a WPF or Windows Forms desktop application
# built on .NET Core.

# To configure this workflow, please follow the instructions in the comments.

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: your-solution-name                         # Replace with your solution name, e.g., MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, e.g., MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the WAP project directory relative to the solution, e.g., MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your WAP project, e.g., MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install the .NET Core SDK
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Set up MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Execute unit tests in the solution
      - name: Execute Unit Tests
        run: |
          echo "Running unit tests..."
          dotnet test $env:Test_Project_Path --configuration ${{ matrix.configuration }} --no-restore --verbosity normal
        continue-on-error: true  # Allows the workflow to continue even if tests fail

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore Application
        run: |
          echo "Restoring application..."
          msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

      # Decode the base64 encoded pfx and save the Signing Certificate
      - name: Decode PFX Certificate
        run: |
          echo "Decoding the PFX certificate..."
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Create App Package
        run: |
          echo "Creating app package..."
          msbuild $env:Wap_Project_Path /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: StoreUpload

      # Remove the PFX certificate after packaging
      - name: Remove PFX Certificate
        run: |
          echo "Removing PFX certificate..."
          Remove-Item -Path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx -Force

      # Upload the MSIX package as a build artifact
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: MSIX Package
          path: ${{ env.Wap_Project_Directory }}\AppPackages

